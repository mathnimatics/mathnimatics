---
import Canvas from "../../animation/canvas.astro"
import Controls from "../../animation/controls.astro"
---

<style is:global>
  #fx * {
    transition: 200ms;
  }
  #fx {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    position: absolute;
    font-size: clamp(1rem, 10vw, 2rem);
    text-align: center;
    margin: 0;
  }
  #graph {
    width: 100%;
    height: 100%;
    position: relative;
    overflow: hidden;
    background-color: #2a2a2a;
  }
  #graph * {
    transition: 200ms;
  }
  .tick:last-child {
    visibility: hidden;
  }
  .tick:first-child::after {
    display: none;
  }
  .tick::after {
    content: attr(data-tick);
    position: absolute;
    font-size: 0.7rem;
  }
  .tick::before {
    content: "";
    background-color: rgba(255, 255, 255, 0.1);
  }
  #x-axis {
    --color: red;
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    display: flex;
    justify-content: space-between;
  }
  #x-axis::after {
    content: "x-axis";
    position: absolute;
    bottom: 5px;
    right: 5px;
    pointer-events: none;
    font-weight: bold;
    color: var(--color-x);
    transition: 200ms;
  }
  #x-axis .tick {
    height: 5px;
    width: 1px;
    background-color: white;
    position: relative;
  }
  #x-axis .tick::after {
    left: 50%;
    transform: translateX(-50%);
    bottom: 10px;
  }
  #x-axis .tick::before {
    width: 1px;
    height: 1000px;
    bottom: 0;
    position: absolute;
  }

  #y-axis {
    --color: blue;
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    display: flex;
    flex-direction: column-reverse;
    justify-content: space-between;
  }
  #y-axis::after {
    content: "y-axis";
    position: absolute;
    top: 0;
    left: 5px;
    width: 100px;
    pointer-events: none;
    font-weight: bold;
    color: var(--color-y);
    transition: 200ms;
  }
  #y-axis .tick {
    width: 5px;
    height: 1px;
    background-color: white;
    position: relative;
  }
  #y-axis .tick::after {
    left: 10px;
    transform: translateY(-50%);
  }
  #y-axis .tick::before {
    width: 1000px;
    height: 1px;
    left: 0;
    position: absolute;
  }
  #ev {
    position: absolute;
    top: 30px;
    right: 30px;
    font-size: clamp(1rem, 10vw, 2rem);
    font-size: 2rem;
  }
  .dot {
    position: absolute;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: red;
    transform: translate(-50%, -50%);
  }
</style>

<Canvas />
<Controls />

<script>
  import anime from "animejs"
  import controls from "../../animation/controls.js"

  let urlSillyHack = window.location.href.split("/")
  if (urlSillyHack.includes("subtraction-basics")) {

  const canvas = document.getElementById("canvas")

  controls([
    {
      text: "Subtraction is the opposite of addition. Instead of adding two values, one value decreases the other.",
      play() {
        this.fx = document.createElement("h2")
        this.fx.id = "fx"
        this.fx.innerHTML =
          '<span class="input input1 x">1</span> - <span class="input input2 x">1</span> = <span class="output">0</span>'
        canvas.appendChild(this.fx)
      },
    },
    {
      text: "With subtraction, the value on the left of the operator (-) is the value being deducted.",
      play() {
        var tl = anime.timeline({
            duration: 1000
        })
        tl.add({
          targets: "#fx .input1",
          duration: 1000,
          color: "#0000FF",

        })
      },
    },
    {
      text: "...and the value on the right of the operator (-) is the value to deduct the first with.",
      play() {
        var tl = anime.timeline({
            duration: 1000
        })
        tl.add({
          targets: "#fx .input2",
          duration: 1000,
          color: "#FF0000",
        })
      },
    },
    {
      text: "When the left value increases, the output increases.",
      play() {
        document.querySelector("#fx .input2").innerHTML = String(1)
        document.querySelector("#fx .output").innerHTML = String(0)

        this.timeout = null
        const animate = (i = 1) => {
          if (i > 100) return
          this.timeout = setTimeout(
            () => {
              document.querySelector("#fx .input1").innerHTML = String(i)
              this.timeout = setTimeout(() => {
                document.querySelector("#fx .output").innerHTML = String(i - 1)
                animate(i + 1)
              }, 500 / i)
            },
            Math.round(500 / i),
          )
        }

        animate()
      },
    },
    {
      text: "...but the right value causes the output to decrease.",
      play() {
        document.querySelector("#fx .input1").innerHTML = String(100)
        this.timeout = null
        const animate = (i = 1) => {
          if (i > 100) return
          this.timeout = setTimeout(
            () => {
              document.querySelector("#fx .input2").innerHTML = String(i)
              this.timeout = setTimeout(() => {
                document.querySelector("#fx .output").innerHTML = String(100 - i)
                animate(i + 1)
              }, 500 / i)
            },
            Math.round(500 / i),
          )
        }

        animate()
      },
    },
    {
      text: "And that's division!",
      play() {
        setTimeout(() => {
          document.querySelector("#fx .input1").innerHTML = String(100)
          document.querySelector("#fx .input2").innerHTML = String(100)
        }, 150)
        setTimeout(() => {
          document.querySelector("#fx .input1").innerHTML = String(10)
          document.querySelector("#fx .input2").innerHTML = String(10)
        }, 300)
        setTimeout(() => {
          document.querySelector("#fx .input1").innerHTML = String(1)
          document.querySelector("#fx .input2").innerHTML = String(1)
        }, 600)
        setTimeout(() => {
          document.querySelector("#fx .input1").innerHTML = String(0)
          document.querySelector("#fx .input2").innerHTML = String(0)
        }, 1000)
        

      },
    }
  ])
}
</script>
